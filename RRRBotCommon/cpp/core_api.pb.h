// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core_api.proto

#ifndef PROTOBUF_core_5fapi_2eproto__INCLUDED
#define PROTOBUF_core_5fapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/xml/xml_message.h>
#include <google/protobuf/rpc/rpc_service.h>
#include <google/protobuf/rpc/rpc_client.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_core_5fapi_2eproto();
void protobuf_AssignDesc_core_5fapi_2eproto();
void protobuf_ShutdownFile_core_5fapi_2eproto();

class Empty;
class Key;
class Coords;
class Item;
class Inventory;
class PlayerInfo;

// ===================================================================

class Empty : public ::google::protobuf::Message {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  Empty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// -------------------------------------------------------------------

class Key : public ::google::protobuf::Message {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  Key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:Key)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Key* default_instance_;
};
// -------------------------------------------------------------------

class Coords : public ::google::protobuf::Message {
 public:
  Coords();
  virtual ~Coords();

  Coords(const Coords& from);

  inline Coords& operator=(const Coords& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coords& default_instance();

  void Swap(Coords* other);

  // implements Message ----------------------------------------------

  Coords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Coords& from);
  void MergeFrom(const Coords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Coords)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Coords* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Inventory : public ::google::protobuf::Message {
 public:
  Inventory();
  virtual ~Inventory();

  Inventory(const Inventory& from);

  inline Inventory& operator=(const Inventory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inventory& default_instance();

  void Swap(Inventory* other);

  // implements Message ----------------------------------------------

  Inventory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inventory& from);
  void MergeFrom(const Inventory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Item& items(int index) const;
  inline ::Item* mutable_items(int index);
  inline ::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Inventory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Inventory* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // optional int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional float angle = 5;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 5;
  inline float angle() const;
  inline void set_angle(float value);

  // @@protoc_insertion_point(class_scope:PlayerInfo)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 hp_;
  float angle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_core_5fapi_2eproto();
  friend void protobuf_AssignDesc_core_5fapi_2eproto();
  friend void protobuf_ShutdownFile_core_5fapi_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// ===================================================================

class CoreApi_Stub;

class CoreApi : public ::google::protobuf::rpc::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CoreApi() {};
 public:
  virtual ~CoreApi();

  typedef CoreApi_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual const ::google::protobuf::rpc::Error GetPlayerInfo(
    const ::Empty* request,
    ::PlayerInfo* response);
  virtual const ::google::protobuf::rpc::Error GetInventory(
    const ::Empty* request,
    ::Inventory* response);
  virtual const ::google::protobuf::rpc::Error GoToXY(
    const ::Coords* request,
    ::Empty* response);
  virtual const ::google::protobuf::rpc::Error MouseClick(
    const ::Coords* request,
    ::Empty* response);
  virtual const ::google::protobuf::rpc::Error PressKey(
    const ::Key* request,
    ::Empty* response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  const ::google::protobuf::rpc::Error CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CoreApi);
};

class CoreApi_Stub : public CoreApi {
 public:
  CoreApi_Stub(::google::protobuf::rpc::Caller* client);
  CoreApi_Stub(::google::protobuf::rpc::Caller* client, bool client_ownership);
  ~CoreApi_Stub();

  // implements CoreApi ------------------------------------------

  const ::google::protobuf::rpc::Error GetPlayerInfo(
    const ::Empty* request,
    ::PlayerInfo* response);
  const ::google::protobuf::rpc::Error GetInventory(
    const ::Empty* request,
    ::Inventory* response);
  const ::google::protobuf::rpc::Error GoToXY(
    const ::Coords* request,
    ::Empty* response);
  const ::google::protobuf::rpc::Error MouseClick(
    const ::Coords* request,
    ::Empty* response);
  const ::google::protobuf::rpc::Error PressKey(
    const ::Key* request,
    ::Empty* response);

 private:
  ::google::protobuf::rpc::Caller* client_;
  bool owns_client_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CoreApi_Stub);
};


// ===================================================================


// ===================================================================

// Empty

// -------------------------------------------------------------------

// Key

// required string key = 1;
inline bool Key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Key::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Key::key() const {
  return *key_;
}
inline void Key::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Key::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Key::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Key::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Key::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Coords

// required int32 x = 1;
inline bool Coords::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Coords::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Coords::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Coords::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Coords::x() const {
  return x_;
}
inline void Coords::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Coords::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Coords::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Coords::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Coords::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Coords::y() const {
  return y_;
}
inline void Coords::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Item

// required int32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 count = 2;
inline bool Item::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Item::count() const {
  return count_;
}
inline void Item::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Inventory

// repeated .Item items = 1;
inline int Inventory::items_size() const {
  return items_.size();
}
inline void Inventory::clear_items() {
  items_.Clear();
}
inline const ::Item& Inventory::items(int index) const {
  return items_.Get(index);
}
inline ::Item* Inventory::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Item* Inventory::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
Inventory::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
Inventory::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// PlayerInfo

// optional int32 x = 1;
inline bool PlayerInfo::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PlayerInfo::x() const {
  return x_;
}
inline void PlayerInfo::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool PlayerInfo::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PlayerInfo::y() const {
  return y_;
}
inline void PlayerInfo::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 z = 3;
inline bool PlayerInfo::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 PlayerInfo::z() const {
  return z_;
}
inline void PlayerInfo::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// optional int32 hp = 4;
inline bool PlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PlayerInfo::hp() const {
  return hp_;
}
inline void PlayerInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional float angle = 5;
inline bool PlayerInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float PlayerInfo::angle() const {
  return angle_;
}
inline void PlayerInfo::set_angle(float value) {
  set_has_angle();
  angle_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_5fapi_2eproto__INCLUDED
